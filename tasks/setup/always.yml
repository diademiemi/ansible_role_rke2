---
- name: "Ensure RKE2 config directory exists"
  become: true
  ansible.builtin.file:
    path: "/etc/rancher/rke2"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Set rke2_server_ip to first host if not defined
  # Select a "master" server node which will be uwsed to bootstrap the cluster
  ansible.builtin.set_fact:
    # Fuckshittery that only selects a host where type is either "server" or undefined (defaults to "server")
    rke2_server_ip: "{{ _rke2_server_ip }}"
  vars:
    _hostvars_in_play: "{{ hostvars | dict2items | selectattr('key', 'in', ansible_play_hosts) | list }}"
    _rke2_server_ip: "{{ _hostvars_in_play
      | selectattr('value.rke2_type', 'defined')
      | selectattr('value.rke2_type', 'equalto', 'server')
      | combine(_hostvars_in_play
      | rejectattr('value.rke2_type', 'defined'))
      | dict2items | list | sort(attribute='key') | json_query('[].value.ansible_default_ipv4.address') | first }}"
  when:
    - ansible_play_hosts | sort | map('extract', hostvars, 'rke2_server_ip') | select('defined') | list | length == 0
    - ansible_default_ipv4.address != _rke2_server_ip
    - rke2_auto_cluster  # Only run when we should automatically cluster the servers

- name: Return cluster information
  ansible.builtin.debug:
    msg: "{% if rke2_server_ip is defined %}Using {{ rke2_server_ip }} as bootstrap server{% else %}Cluster will be boostrapped from this node{% endif %}"

- name: First server
  when:
    - rke2_server_ip is undefined
  block:
    - name: "Check if config file exists"
      ansible.builtin.stat:
        path: "/etc/rancher/rke2/config.yaml"
      register: _rke2_server_config_exists

    - name: "Read current RKE2 server token from config"
      ansible.builtin.slurp:
        src: "/etc/rancher/rke2/config.yaml"
      register: _rke2_server_config
      when: _rke2_server_config_exists.stat.exists

    - name: "Parse current RKE2 server token from config"
      ansible.builtin.set_fact:
        rke2_server_token: "{{ _rke2_server_config_yaml.token }}"
      vars:
        _rke2_server_config_yaml: "{{ _rke2_server_config.content | b64decode | from_yaml }}"
      when: _rke2_server_config_exists.stat.exists and _rke2_server_config_yaml.token is defined

    - name: "Set rke2_server_token to current token if not defined"
      ansible.builtin.set_fact:
        rke2_server_token: "{{ rke2_server_token.stdout }}"
      when: rke2_server_token.stdout is defined and rke2_server_token.stdout != ""

    - name: "Generate token if none was given"
      ansible.builtin.set_fact:
        rke2_server_token: "{{ lookup('password', '/dev/null length=64 chars=ascii_letters,digits') }}"
      when: rke2_server_token is not defined

    - name: "Template RKE2 config"
      become: true
      ansible.builtin.template:
        src: "config.yaml.j2"
        dest: "/etc/rancher/rke2/config.yaml"
        owner: root
        group: root
        mode: '0644'
      when:
        - "'molecule-idempotence-notest' not in ansible_skip_tags"

    - name: "Download RKE2 install script"
      become: true
      ansible.builtin.get_url:
        url: "{{ rke2_script_url }}"
        dest: "/tmp/rke2-install.sh"
        owner: root
        group: root
        mode: '0755'

    - name: "Run RKE2 install script"
      become: true
      ansible.builtin.shell: |
        INSTALL_RKE2_CHANNEL="{{ rke2_channel }}" /tmp/rke2-install.sh
      args:
        creates: "/usr/local/bin/rke2"
      when:
        - "'molecule-idempotence-notest' not in ansible_skip_tags"

    - name: "Start first RKE2 server"
      become: true
      ansible.builtin.service:
        name: rke2-server
        state: started
        enabled: true
      when:
        - "'molecule-notest' not in ansible_skip_tags"

- name: "Wait for RKE2 server to be ready on port 9345"
  become: true
  ansible.builtin.wait_for:
    port: 9345
    state: started
    timeout: 300
  when:
    - rke2_server_ip is undefined
    - "'molecule-notest' not in ansible_skip_tags"

- name: Other servers
  when:
    - rke2_server_ip is defined
  block:
    - name: "Attempt to get token from master if none was given"
      ansible.builtin.set_fact:
        rke2_server_token: "{{ hostvars[_current_master_nodename].rke2_server_token }}"
      vars:
        # Get which node has the master IP
        # Only search hosts in play! We can't be sure that all hosts have facts gathered
        _hostvars_in_play: "{{ hostvars | dict2items | selectattr('key', 'in', ansible_play_hosts) | list }}"
        _current_master_nodename: "{{ _hostvars_in_play | selectattr('value.ansible_default_ipv4.address', '==', rke2_server_ip)
          | map(attribute='key') | list | first }}"
      when: rke2_server_token is not defined

    - name: "Template RKE2 config"
      become: true
      ansible.builtin.template:
        src: "config.yaml.j2"
        dest: "/etc/rancher/rke2/config.yaml"
        owner: root
        group: root
        mode: '0644'
      when:
        - "'molecule-idempotence-notest' not in ansible_skip_tags"

    - name: "Download RKE2 install script"
      become: true
      ansible.builtin.get_url:
        url: "{{ rke2_script_url }}"
        dest: "/tmp/rke2-install.sh"
        owner: root
        group: root
        mode: '0755'

    - name: "Run RKE2 install script"
      become: true
      ansible.builtin.shell: |
        INSTALL_RKE2_CHANNEL="{{ rke2_channel }}" INSTALL_RKE2_TYPE="{{ rke2_type }}" /tmp/rke2-install.sh
      args:
        creates: "/usr/local/bin/rke2"
      register: test

    - name: "Start other RKE2 servers"
      become: true
      ansible.builtin.service:
        name: "rke2-{{ rke2_type }}"
        state: started
        enabled: true
      when:
        - "'molecule-notest' not in ansible_skip_tags"
      retries: 5
      delay: 10
      register: rke2_start
      until: rke2_start is succeeded

- name: "Server | Ensure .kube directory exists"
  become: true
  ansible.builtin.file:
    path: ~{{ rke2_server_ansible_user }}/.kube
    state: directory
    owner: "{{ rke2_server_ansible_user }}"
    group: "{{ rke2_server_ansible_user }}"
    mode: '0700'

- name: Check if rke2.yaml exists
  become: true
  ansible.builtin.stat:
    path: /etc/rancher/rke2/rke2.yaml
  register: rke2_yaml

- name: "Server | Copy config file to user home directory"
  become: true
  ansible.builtin.copy:
    src: /etc/rancher/rke2/rke2.yaml
    dest: ~{{ rke2_server_ansible_user }}/.kube/config
    remote_src: true
    owner: "{{ rke2_server_ansible_user }}"
    mode: "u=rw,g=,o="
  when: rke2_yaml.stat.exists

# - name: "Server | Create rke2 symlink"
#   become: true
#   ansible.builtin.file:
#     src: /opt/rke2/bin/rke2
#     dest: /usr/local/bin/rke2
#     state: link
#     force: true

- name: "Server | Create kubectl symlink"
  become: true
  ansible.builtin.file:
    src: /var/lib/rancher/rke2/bin/kubectl
    dest: /usr/local/bin/kubectl
    state: link
    force: true

- name: "Server | Create crictl symlink"
  become: true
  ansible.builtin.file:
    src: /var/lib/rancher/rke2/bin/crictl
    dest: /usr/local/bin/crictl
    state: link
    force: true

...
